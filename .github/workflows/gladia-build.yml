name: Docker image build

on:
  push:
    branches:
      - 'main'

concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  build:
    runs-on: [self-hosted, linux, GPU]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Login to NVCR Registry
        uses: docker/login-action@v2
        with:
          registry: nvcr.io
          username: ${{ secrets.NVCR_USERNAME }}
          password: ${{ secrets.NVCR_ACCESS_TOKEN }}
      - name: Build Gladia image
        env:
          DOCKER_BUILDKIT: 1
        working-directory: ./src
        run: docker build -t gladiaio/gladia:ci-${{ github.ref_name	 }} -f gpu.Dockerfile .

  test:
    needs: build
    runs-on: [self-hosted, linux, GPU]
    steps:
      - name: Get GPU ID
        id: gpuid
        run: |
          N=$(echo ${{ runner.name }} )
          if [[ ${N: -1} =~ [0-9] ]]; then 
            echo ::set-output name=gpuid::$(echo ${N: -1} )
          else 
            echo "Error : unexpected GPU ID"
            exit 1
          fi

      - name: Start Gladia Container
        run: | 
          docker run -d \
          --cpus 14 --gpus '"device=${{steps.gpuid.outputs.gpuid}}"' --shm-size=5g \
          -e IS_CI="True" \
          -p ${{steps.gpuid.outputs.gpuid}}8000:8000 \
          -v /mnt/models/volume:/tmp/gladia/models \
          --name gladia-${{ github.ref_name }} gladiaio/gladia:ci-${{ github.ref_name }}

      - uses: nick-fields/retry@v2
        with:
          timeout_seconds: 10
          max_attempts: 36
          retry_on: error
          command: curl http://localhost:${{steps.gpuid.outputs.gpuid}}8000/v2/health/ready --connect-timeout 5


      - name: Test 1/2
        run: | 
          docker exec -i \
          -e PR=${{ github.event.pull_request.number }} -e GHT=${{ secrets.GITHUB_TOKEN }} \
          gladia-${{ github.ref_name }} \
          /bin/bash -c 'eval "$(micromamba shell hook --shell=bash)" && micromamba activate server && cd /app/unit-test/ && python3 test.py --github_comment --github_token $GHT --github_pull_request $PR --continue_when_failed'

      - name: Clean Docker Test Env
        if: always()
        continue-on-error: True
        run: |
          docker stop gladia-${{ github.ref_name	}}
          docker rm gladia-${{ github.ref_name	}}
