/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDefaultApi.h"
#include "OAIHelpers.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIDefaultApi::OAIDefaultApi() {

}

OAIDefaultApi::~OAIDefaultApi() {

}

OAIDefaultApi::OAIDefaultApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAIDefaultApi::readUsersImageImageUncolorizationUsersGet() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/image/image/uncolorization/users/");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::readUsersImageImageUncolorizationUsersGetCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::readUsersImageImageUncolorizationUsersGetCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit readUsersImageImageUncolorizationUsersGetSignal(output);
        emit readUsersImageImageUncolorizationUsersGetSignalFull(worker, output);
    } else {
        emit readUsersImageImageUncolorizationUsersGetSignalE(output, error_type, error_str);
        emit readUsersImageImageUncolorizationUsersGetSignalEFull(worker, error_type, error_str);
    }
}

void
OAIDefaultApi::rootGet() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIDefaultApi::rootGetCallback);

    worker->execute(&input);
}

void
OAIDefaultApi::rootGetCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }
    OAIObject output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit rootGetSignal(output);
        emit rootGetSignalFull(worker, output);
    } else {
        emit rootGetSignalE(output, error_type, error_str);
        emit rootGetSignalEFull(worker, error_type, error_str);
    }
}


}
